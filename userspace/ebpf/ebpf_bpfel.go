// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ebpfConfigEntryT struct {
	TraceePid       uint32
	Options         uint32
	CgroupV1Hid     uint32
	Padding         uint16
	PoliciesVersion uint16
	PoliciesConfig  struct {
		UidFilterEnabledScopes      uint64
		PidFilterEnabledScopes      uint64
		MntNsFilterEnabledScopes    uint64
		PidNsFilterEnabledScopes    uint64
		UtsNsFilterEnabledScopes    uint64
		CommFilterEnabledScopes     uint64
		CgroupIdFilterEnabledScopes uint64
		ContFilterEnabledScopes     uint64
		NewContFilterEnabledScopes  uint64
		NewPidFilterEnabledScopes   uint64
		ProcTreeFilterEnabledScopes uint64
		BinPathFilterEnabledScopes  uint64
		FollowFilterEnabledScopes   uint64
		UidFilterOutScopes          uint64
		PidFilterOutScopes          uint64
		MntNsFilterOutScopes        uint64
		PidNsFilterOutScopes        uint64
		UtsNsFilterOutScopes        uint64
		CommFilterOutScopes         uint64
		CgroupIdFilterOutScopes     uint64
		ContFilterOutScopes         uint64
		NewContFilterOutScopes      uint64
		NewPidFilterOutScopes       uint64
		ProcTreeFilterOutScopes     uint64
		BinPathFilterOutScopes      uint64
		EnabledScopes               uint64
		UidMax                      uint64
		UidMin                      uint64
		PidMax                      uint64
		PidMin                      uint64
	}
}

type ebpfEventConfigT struct {
	SubmitForPolicies uint64
	ParamTypes        uint64
}

type ebpfEventContextT struct {
	Ts   uint64
	Task struct {
		StartTime       uint64
		CgroupId        uint64
		Pid             uint32
		Tid             uint32
		Ppid            uint32
		HostPid         uint32
		HostTid         uint32
		HostPpid        uint32
		Uid             uint32
		MntId           uint32
		PidId           uint32
		Comm            [16]int8
		UtsName         [16]int8
		Flags           uint32
		LeaderStartTime uint64
		ParentStartTime uint64
	}
	Eventid         uint32
	Syscall         int32
	Retval          int64
	StackId         uint32
	ProcessorId     uint16
	PoliciesVersion uint16
	MatchedPolicies uint64
}

// loadEbpf returns the embedded CollectionSpec for ebpf.
func loadEbpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(getEbpfBytes())
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ebpf: %w", err)
	}

	return spec, err
}

// loadEbpfObjects loads ebpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ebpfObjects
//	*ebpfPrograms
//	*ebpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadEbpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadEbpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ebpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfSpecs struct {
	ebpfProgramSpecs
	ebpfMapSpecs
}

// ebpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfProgramSpecs struct {
	CgroupBpfRunFilterSkb                    *ebpf.ProgramSpec `ebpf:"cgroup_bpf_run_filter_skb"`
	CgroupMkdirSignal                        *ebpf.ProgramSpec `ebpf:"cgroup_mkdir_signal"`
	CgroupRmdirSignal                        *ebpf.ProgramSpec `ebpf:"cgroup_rmdir_signal"`
	CgroupSkbEgress                          *ebpf.ProgramSpec `ebpf:"cgroup_skb_egress"`
	CgroupSkbIngress                         *ebpf.ProgramSpec `ebpf:"cgroup_skb_ingress"`
	EmptyKprobe                              *ebpf.ProgramSpec `ebpf:"empty_kprobe"`
	KernelWriteMagicEnter                    *ebpf.ProgramSpec `ebpf:"kernel_write_magic_enter"`
	KernelWriteMagicReturn                   *ebpf.ProgramSpec `ebpf:"kernel_write_magic_return"`
	LkmSeekerKsetTail                        *ebpf.ProgramSpec `ebpf:"lkm_seeker_kset_tail"`
	LkmSeekerModTreeTail                     *ebpf.ProgramSpec `ebpf:"lkm_seeker_mod_tree_tail"`
	LkmSeekerNewModOnlyTail                  *ebpf.ProgramSpec `ebpf:"lkm_seeker_new_mod_only_tail"`
	LkmSeekerProcTail                        *ebpf.ProgramSpec `ebpf:"lkm_seeker_proc_tail"`
	ProcessExecuteFailedTail                 *ebpf.ProgramSpec `ebpf:"process_execute_failed_tail"`
	SchedProcessExecEventSubmitTail          *ebpf.ProgramSpec `ebpf:"sched_process_exec_event_submit_tail"`
	SchedProcessExecSignal                   *ebpf.ProgramSpec `ebpf:"sched_process_exec_signal"`
	SchedProcessExitSignal                   *ebpf.ProgramSpec `ebpf:"sched_process_exit_signal"`
	SchedProcessForkSignal                   *ebpf.ProgramSpec `ebpf:"sched_process_fork_signal"`
	SendBin                                  *ebpf.ProgramSpec `ebpf:"send_bin"`
	SendBinTp                                *ebpf.ProgramSpec `ebpf:"send_bin_tp"`
	SysDupExitTail                           *ebpf.ProgramSpec `ebpf:"sys_dup_exit_tail"`
	SysEnterInit                             *ebpf.ProgramSpec `ebpf:"sys_enter_init"`
	SysEnterSubmit                           *ebpf.ProgramSpec `ebpf:"sys_enter_submit"`
	SysExitInit                              *ebpf.ProgramSpec `ebpf:"sys_exit_init"`
	SysExitSubmit                            *ebpf.ProgramSpec `ebpf:"sys_exit_submit"`
	SyscallAccept4                           *ebpf.ProgramSpec `ebpf:"syscall__accept4"`
	SyscallExecveEnter                       *ebpf.ProgramSpec `ebpf:"syscall__execve_enter"`
	SyscallExecveExit                        *ebpf.ProgramSpec `ebpf:"syscall__execve_exit"`
	SyscallExecveatEnter                     *ebpf.ProgramSpec `ebpf:"syscall__execveat_enter"`
	SyscallExecveatExit                      *ebpf.ProgramSpec `ebpf:"syscall__execveat_exit"`
	SyscallInitModule                        *ebpf.ProgramSpec `ebpf:"syscall__init_module"`
	TraceRegisterChrdev                      *ebpf.ProgramSpec `ebpf:"trace___register_chrdev"`
	TraceArchPrctl                           *ebpf.ProgramSpec `ebpf:"trace_arch_prctl"`
	TraceBpfCheck                            *ebpf.ProgramSpec `ebpf:"trace_bpf_check"`
	TraceCallUsermodehelper                  *ebpf.ProgramSpec `ebpf:"trace_call_usermodehelper"`
	TraceCapCapable                          *ebpf.ProgramSpec `ebpf:"trace_cap_capable"`
	TraceCheckHelperCall                     *ebpf.ProgramSpec `ebpf:"trace_check_helper_call"`
	TraceCheckMapFuncCompatibility           *ebpf.ProgramSpec `ebpf:"trace_check_map_func_compatibility"`
	TraceChmodCommon                         *ebpf.ProgramSpec `ebpf:"trace_chmod_common"`
	TraceCommitCreds                         *ebpf.ProgramSpec `ebpf:"trace_commit_creds"`
	TraceDebugfsCreateDir                    *ebpf.ProgramSpec `ebpf:"trace_debugfs_create_dir"`
	TraceDebugfsCreateFile                   *ebpf.ProgramSpec `ebpf:"trace_debugfs_create_file"`
	TraceDeviceAdd                           *ebpf.ProgramSpec `ebpf:"trace_device_add"`
	TraceDoExit                              *ebpf.ProgramSpec `ebpf:"trace_do_exit"`
	TraceDoInitModule                        *ebpf.ProgramSpec `ebpf:"trace_do_init_module"`
	TraceDoMmap                              *ebpf.ProgramSpec `ebpf:"trace_do_mmap"`
	TraceDoSigaction                         *ebpf.ProgramSpec `ebpf:"trace_do_sigaction"`
	TraceDoSplice                            *ebpf.ProgramSpec `ebpf:"trace_do_splice"`
	TraceDoTruncate                          *ebpf.ProgramSpec `ebpf:"trace_do_truncate"`
	TraceDup                                 *ebpf.ProgramSpec `ebpf:"trace_dup"`
	TraceDup2                                *ebpf.ProgramSpec `ebpf:"trace_dup2"`
	TraceDup3                                *ebpf.ProgramSpec `ebpf:"trace_dup3"`
	TraceExecBinprm                          *ebpf.ProgramSpec `ebpf:"trace_exec_binprm"`
	TraceExecuteFinished                     *ebpf.ProgramSpec `ebpf:"trace_execute_finished"`
	TraceFdInstall                           *ebpf.ProgramSpec `ebpf:"trace_fd_install"`
	TraceFileModified                        *ebpf.ProgramSpec `ebpf:"trace_file_modified"`
	TraceFileUpdateTime                      *ebpf.ProgramSpec `ebpf:"trace_file_update_time"`
	TraceFilldir64                           *ebpf.ProgramSpec `ebpf:"trace_filldir64"`
	TraceFilpClose                           *ebpf.ProgramSpec `ebpf:"trace_filp_close"`
	TraceInotifyFindInode                    *ebpf.ProgramSpec `ebpf:"trace_inotify_find_inode"`
	TraceKallsymsLookupName                  *ebpf.ProgramSpec `ebpf:"trace_kallsyms_lookup_name"`
	TraceKernelWrite                         *ebpf.ProgramSpec `ebpf:"trace_kernel_write"`
	TraceLoadElfPhdrs                        *ebpf.ProgramSpec `ebpf:"trace_load_elf_phdrs"`
	TraceMmapAlert                           *ebpf.ProgramSpec `ebpf:"trace_mmap_alert"`
	TraceProcCreate                          *ebpf.ProgramSpec `ebpf:"trace_proc_create"`
	TraceProcessVmWritev                     *ebpf.ProgramSpec `ebpf:"trace_process_vm_writev"`
	TracePtrace                              *ebpf.ProgramSpec `ebpf:"trace_ptrace"`
	TraceRegisterKprobe                      *ebpf.ProgramSpec `ebpf:"trace_register_kprobe"`
	TraceRetRegisterChrdev                   *ebpf.ProgramSpec `ebpf:"trace_ret__register_chrdev"`
	TraceRetArchPrctl                        *ebpf.ProgramSpec `ebpf:"trace_ret_arch_prctl"`
	TraceRetDoInitModule                     *ebpf.ProgramSpec `ebpf:"trace_ret_do_init_module"`
	TraceRetDoMmap                           *ebpf.ProgramSpec `ebpf:"trace_ret_do_mmap"`
	TraceRetDoSplice                         *ebpf.ProgramSpec `ebpf:"trace_ret_do_splice"`
	TraceRetDup                              *ebpf.ProgramSpec `ebpf:"trace_ret_dup"`
	TraceRetDup2                             *ebpf.ProgramSpec `ebpf:"trace_ret_dup2"`
	TraceRetDup3                             *ebpf.ProgramSpec `ebpf:"trace_ret_dup3"`
	TraceRetFileModified                     *ebpf.ProgramSpec `ebpf:"trace_ret_file_modified"`
	TraceRetFileUpdateTime                   *ebpf.ProgramSpec `ebpf:"trace_ret_file_update_time"`
	TraceRetInotifyFindInode                 *ebpf.ProgramSpec `ebpf:"trace_ret_inotify_find_inode"`
	TraceRetKallsymsLookupName               *ebpf.ProgramSpec `ebpf:"trace_ret_kallsyms_lookup_name"`
	TraceRetKernelWrite                      *ebpf.ProgramSpec `ebpf:"trace_ret_kernel_write"`
	TraceRetKernelWriteTail                  *ebpf.ProgramSpec `ebpf:"trace_ret_kernel_write_tail"`
	TraceRetProcessVmWritev                  *ebpf.ProgramSpec `ebpf:"trace_ret_process_vm_writev"`
	TraceRetPtrace                           *ebpf.ProgramSpec `ebpf:"trace_ret_ptrace"`
	TraceRetRegisterKprobe                   *ebpf.ProgramSpec `ebpf:"trace_ret_register_kprobe"`
	TraceRetSockAllocFile                    *ebpf.ProgramSpec `ebpf:"trace_ret_sock_alloc_file"`
	TraceRetVfsRead                          *ebpf.ProgramSpec `ebpf:"trace_ret_vfs_read"`
	TraceRetVfsReadTail                      *ebpf.ProgramSpec `ebpf:"trace_ret_vfs_read_tail"`
	TraceRetVfsReadv                         *ebpf.ProgramSpec `ebpf:"trace_ret_vfs_readv"`
	TraceRetVfsReadvTail                     *ebpf.ProgramSpec `ebpf:"trace_ret_vfs_readv_tail"`
	TraceRetVfsWrite                         *ebpf.ProgramSpec `ebpf:"trace_ret_vfs_write"`
	TraceRetVfsWriteTail                     *ebpf.ProgramSpec `ebpf:"trace_ret_vfs_write_tail"`
	TraceRetVfsWritev                        *ebpf.ProgramSpec `ebpf:"trace_ret_vfs_writev"`
	TraceRetVfsWritevTail                    *ebpf.ProgramSpec `ebpf:"trace_ret_vfs_writev_tail"`
	TraceSecurityBpf                         *ebpf.ProgramSpec `ebpf:"trace_security_bpf"`
	TraceSecurityBpfMap                      *ebpf.ProgramSpec `ebpf:"trace_security_bpf_map"`
	TraceSecurityBpfProg                     *ebpf.ProgramSpec `ebpf:"trace_security_bpf_prog"`
	TraceSecurityBprmCheck                   *ebpf.ProgramSpec `ebpf:"trace_security_bprm_check"`
	TraceSecurityBprmCredsForExec            *ebpf.ProgramSpec `ebpf:"trace_security_bprm_creds_for_exec"`
	TraceSecurityFileIoctl                   *ebpf.ProgramSpec `ebpf:"trace_security_file_ioctl"`
	TraceSecurityFileMprotect                *ebpf.ProgramSpec `ebpf:"trace_security_file_mprotect"`
	TraceSecurityFileOpen                    *ebpf.ProgramSpec `ebpf:"trace_security_file_open"`
	TraceSecurityFilePermission              *ebpf.ProgramSpec `ebpf:"trace_security_file_permission"`
	TraceSecurityInodeMknod                  *ebpf.ProgramSpec `ebpf:"trace_security_inode_mknod"`
	TraceSecurityInodeRename                 *ebpf.ProgramSpec `ebpf:"trace_security_inode_rename"`
	TraceSecurityInodeSymlink                *ebpf.ProgramSpec `ebpf:"trace_security_inode_symlink"`
	TraceSecurityInodeUnlink                 *ebpf.ProgramSpec `ebpf:"trace_security_inode_unlink"`
	TraceSecurityKernelPostReadFile          *ebpf.ProgramSpec `ebpf:"trace_security_kernel_post_read_file"`
	TraceSecurityKernelReadFile              *ebpf.ProgramSpec `ebpf:"trace_security_kernel_read_file"`
	TraceSecurityMmapFile                    *ebpf.ProgramSpec `ebpf:"trace_security_mmap_file"`
	TraceSecurityPathNotify                  *ebpf.ProgramSpec `ebpf:"trace_security_path_notify"`
	TraceSecuritySbMount                     *ebpf.ProgramSpec `ebpf:"trace_security_sb_mount"`
	TraceSecuritySettime64                   *ebpf.ProgramSpec `ebpf:"trace_security_settime64"`
	TraceSecuritySkClone                     *ebpf.ProgramSpec `ebpf:"trace_security_sk_clone"`
	TraceSecuritySocketAccept                *ebpf.ProgramSpec `ebpf:"trace_security_socket_accept"`
	TraceSecuritySocketBind                  *ebpf.ProgramSpec `ebpf:"trace_security_socket_bind"`
	TraceSecuritySocketConnect               *ebpf.ProgramSpec `ebpf:"trace_security_socket_connect"`
	TraceSecuritySocketCreate                *ebpf.ProgramSpec `ebpf:"trace_security_socket_create"`
	TraceSecuritySocketListen                *ebpf.ProgramSpec `ebpf:"trace_security_socket_listen"`
	TraceSecuritySocketRecvmsg               *ebpf.ProgramSpec `ebpf:"trace_security_socket_recvmsg"`
	TraceSecuritySocketSendmsg               *ebpf.ProgramSpec `ebpf:"trace_security_socket_sendmsg"`
	TraceSecuritySocketSetsockopt            *ebpf.ProgramSpec `ebpf:"trace_security_socket_setsockopt"`
	TraceSecurityTaskSetrlimit               *ebpf.ProgramSpec `ebpf:"trace_security_task_setrlimit"`
	TraceSetFsPwd                            *ebpf.ProgramSpec `ebpf:"trace_set_fs_pwd"`
	TraceSockAllocFile                       *ebpf.ProgramSpec `ebpf:"trace_sock_alloc_file"`
	TraceSwitchTaskNamespaces                *ebpf.ProgramSpec `ebpf:"trace_switch_task_namespaces"`
	TraceSysEnter                            *ebpf.ProgramSpec `ebpf:"trace_sys_enter"`
	TraceSysExit                             *ebpf.ProgramSpec `ebpf:"trace_sys_exit"`
	TraceTracepointProbeRegisterPrioMayExist *ebpf.ProgramSpec `ebpf:"trace_tracepoint_probe_register_prio_may_exist"`
	TraceUtimesCommon                        *ebpf.ProgramSpec `ebpf:"trace_utimes_common"`
	TraceVfsRead                             *ebpf.ProgramSpec `ebpf:"trace_vfs_read"`
	TraceVfsReadv                            *ebpf.ProgramSpec `ebpf:"trace_vfs_readv"`
	TraceVfsUtimes                           *ebpf.ProgramSpec `ebpf:"trace_vfs_utimes"`
	TraceVfsWrite                            *ebpf.ProgramSpec `ebpf:"trace_vfs_write"`
	TraceVfsWritev                           *ebpf.ProgramSpec `ebpf:"trace_vfs_writev"`
	TracepointCgroupCgroupAttachTask         *ebpf.ProgramSpec `ebpf:"tracepoint__cgroup__cgroup_attach_task"`
	TracepointCgroupCgroupMkdir              *ebpf.ProgramSpec `ebpf:"tracepoint__cgroup__cgroup_mkdir"`
	TracepointCgroupCgroupRmdir              *ebpf.ProgramSpec `ebpf:"tracepoint__cgroup__cgroup_rmdir"`
	TracepointExecTest                       *ebpf.ProgramSpec `ebpf:"tracepoint__exec_test"`
	TracepointModuleModuleFree               *ebpf.ProgramSpec `ebpf:"tracepoint__module__module_free"`
	TracepointModuleModuleLoad               *ebpf.ProgramSpec `ebpf:"tracepoint__module__module_load"`
	TracepointRawSyscallsSysEnter            *ebpf.ProgramSpec `ebpf:"tracepoint__raw_syscalls__sys_enter"`
	TracepointRawSyscallsSysExit             *ebpf.ProgramSpec `ebpf:"tracepoint__raw_syscalls__sys_exit"`
	TracepointSchedSchedProcessExec          *ebpf.ProgramSpec `ebpf:"tracepoint__sched__sched_process_exec"`
	TracepointSchedSchedProcessExit          *ebpf.ProgramSpec `ebpf:"tracepoint__sched__sched_process_exit"`
	TracepointSchedSchedProcessFork          *ebpf.ProgramSpec `ebpf:"tracepoint__sched__sched_process_fork"`
	TracepointSchedSchedProcessFree          *ebpf.ProgramSpec `ebpf:"tracepoint__sched__sched_process_free"`
	TracepointSchedSchedSwitch               *ebpf.ProgramSpec `ebpf:"tracepoint__sched__sched_switch"`
	TracepointTaskTaskRename                 *ebpf.ProgramSpec `ebpf:"tracepoint__task__task_rename"`
	UprobeLkmSeeker                          *ebpf.ProgramSpec `ebpf:"uprobe_lkm_seeker"`
	UprobeLkmSeekerSubmitter                 *ebpf.ProgramSpec `ebpf:"uprobe_lkm_seeker_submitter"`
	UprobeMemDumpTrigger                     *ebpf.ProgramSpec `ebpf:"uprobe_mem_dump_trigger"`
	UprobeSeqOpsTrigger                      *ebpf.ProgramSpec `ebpf:"uprobe_seq_ops_trigger"`
	UprobeSyscallTableCheck                  *ebpf.ProgramSpec `ebpf:"uprobe_syscall_table_check"`
	VfsWriteMagicEnter                       *ebpf.ProgramSpec `ebpf:"vfs_write_magic_enter"`
	VfsWriteMagicReturn                      *ebpf.ProgramSpec `ebpf:"vfs_write_magic_return"`
	VfsWritevMagicEnter                      *ebpf.ProgramSpec `ebpf:"vfs_writev_magic_enter"`
	VfsWritevMagicReturn                     *ebpf.ProgramSpec `ebpf:"vfs_writev_magic_return"`
}

// ebpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfMapSpecs struct {
	ArgsMap                *ebpf.MapSpec `ebpf:"args_map"`
	BinaryFilter           *ebpf.MapSpec `ebpf:"binary_filter"`
	BinaryFilterVersion    *ebpf.MapSpec `ebpf:"binary_filter_version"`
	BpfAttachMap           *ebpf.MapSpec `ebpf:"bpf_attach_map"`
	BpfAttachTmpMap        *ebpf.MapSpec `ebpf:"bpf_attach_tmp_map"`
	BpfProgLoadMap         *ebpf.MapSpec `ebpf:"bpf_prog_load_map"`
	Bufs                   *ebpf.MapSpec `ebpf:"bufs"`
	CgroupIdFilter         *ebpf.MapSpec `ebpf:"cgroup_id_filter"`
	CgroupIdFilterVersion  *ebpf.MapSpec `ebpf:"cgroup_id_filter_version"`
	CgrpctxmapEg           *ebpf.MapSpec `ebpf:"cgrpctxmap_eg"`
	CgrpctxmapIn           *ebpf.MapSpec `ebpf:"cgrpctxmap_in"`
	CommFilter             *ebpf.MapSpec `ebpf:"comm_filter"`
	CommFilterVersion      *ebpf.MapSpec `ebpf:"comm_filter_version"`
	ConfigMap              *ebpf.MapSpec `ebpf:"config_map"`
	ContainersMap          *ebpf.MapSpec `ebpf:"containers_map"`
	ElfFilesMap            *ebpf.MapSpec `ebpf:"elf_files_map"`
	Entrymap               *ebpf.MapSpec `ebpf:"entrymap"`
	EventDataMap           *ebpf.MapSpec `ebpf:"event_data_map"`
	Events                 *ebpf.MapSpec `ebpf:"events"`
	EventsMap              *ebpf.MapSpec `ebpf:"events_map"`
	EventsMapVersion       *ebpf.MapSpec `ebpf:"events_map_version"`
	ExpectedSysCallTable   *ebpf.MapSpec `ebpf:"expected_sys_call_table"`
	FdArgPathMap           *ebpf.MapSpec `ebpf:"fd_arg_path_map"`
	FileModificationMap    *ebpf.MapSpec `ebpf:"file_modification_map"`
	FileReadPathFilter     *ebpf.MapSpec `ebpf:"file_read_path_filter"`
	FileTypeFilter         *ebpf.MapSpec `ebpf:"file_type_filter"`
	FileWritePathFilter    *ebpf.MapSpec `ebpf:"file_write_path_filter"`
	FileWrites             *ebpf.MapSpec `ebpf:"file_writes"`
	GenericSysEnterTails   *ebpf.MapSpec `ebpf:"generic_sys_enter_tails"`
	GenericSysExitTails    *ebpf.MapSpec `ebpf:"generic_sys_exit_tails"`
	Inodemap               *ebpf.MapSpec `ebpf:"inodemap"`
	IoFilePathCacheMap     *ebpf.MapSpec `ebpf:"io_file_path_cache_map"`
	KconfigMap             *ebpf.MapSpec `ebpf:"kconfig_map"`
	KsymbolsMap            *ebpf.MapSpec `ebpf:"ksymbols_map"`
	Logs                   *ebpf.MapSpec `ebpf:"logs"`
	LogsCount              *ebpf.MapSpec `ebpf:"logs_count"`
	MntNsFilter            *ebpf.MapSpec `ebpf:"mnt_ns_filter"`
	MntNsFilterVersion     *ebpf.MapSpec `ebpf:"mnt_ns_filter_version"`
	ModulesMap             *ebpf.MapSpec `ebpf:"modules_map"`
	NetCapEvents           *ebpf.MapSpec `ebpf:"net_cap_events"`
	NetHeapEvent           *ebpf.MapSpec `ebpf:"net_heap_event"`
	NetconfigMap           *ebpf.MapSpec `ebpf:"netconfig_map"`
	Netflowmap             *ebpf.MapSpec `ebpf:"netflowmap"`
	NewModuleMap           *ebpf.MapSpec `ebpf:"new_module_map"`
	PidFilter              *ebpf.MapSpec `ebpf:"pid_filter"`
	PidFilterVersion       *ebpf.MapSpec `ebpf:"pid_filter_version"`
	PidNsFilter            *ebpf.MapSpec `ebpf:"pid_ns_filter"`
	PidNsFilterVersion     *ebpf.MapSpec `ebpf:"pid_ns_filter_version"`
	PoliciesConfigMap      *ebpf.MapSpec `ebpf:"policies_config_map"`
	PoliciesConfigVersion  *ebpf.MapSpec `ebpf:"policies_config_version"`
	ProcInfoMap            *ebpf.MapSpec `ebpf:"proc_info_map"`
	ProcessTreeMap         *ebpf.MapSpec `ebpf:"process_tree_map"`
	ProcessTreeMapVersion  *ebpf.MapSpec `ebpf:"process_tree_map_version"`
	ProgArray              *ebpf.MapSpec `ebpf:"prog_array"`
	ProgArrayTp            *ebpf.MapSpec `ebpf:"prog_array_tp"`
	RecentDeletedModuleMap *ebpf.MapSpec `ebpf:"recent_deleted_module_map"`
	ScratchMap             *ebpf.MapSpec `ebpf:"scratch_map"`
	SignalDataMap          *ebpf.MapSpec `ebpf:"signal_data_map"`
	Signals                *ebpf.MapSpec `ebpf:"signals"`
	Sockmap                *ebpf.MapSpec `ebpf:"sockmap"`
	StackAddresses         *ebpf.MapSpec `ebpf:"stack_addresses"`
	Sys32To64Map           *ebpf.MapSpec `ebpf:"sys_32_to_64_map"`
	SysEnterInitTail       *ebpf.MapSpec `ebpf:"sys_enter_init_tail"`
	SysEnterSubmitTail     *ebpf.MapSpec `ebpf:"sys_enter_submit_tail"`
	SysEnterTails          *ebpf.MapSpec `ebpf:"sys_enter_tails"`
	SysExitInitTail        *ebpf.MapSpec `ebpf:"sys_exit_init_tail"`
	SysExitSubmitTail      *ebpf.MapSpec `ebpf:"sys_exit_submit_tail"`
	SysExitTails           *ebpf.MapSpec `ebpf:"sys_exit_tails"`
	TaskInfoMap            *ebpf.MapSpec `ebpf:"task_info_map"`
	UidFilter              *ebpf.MapSpec `ebpf:"uid_filter"`
	UidFilterVersion       *ebpf.MapSpec `ebpf:"uid_filter_version"`
	UtsNsFilter            *ebpf.MapSpec `ebpf:"uts_ns_filter"`
	UtsNsFilterVersion     *ebpf.MapSpec `ebpf:"uts_ns_filter_version"`
	WalkModTreeQueue       *ebpf.MapSpec `ebpf:"walk_mod_tree_queue"`
}

// ebpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfObjects struct {
	ebpfPrograms
	ebpfMaps
}

func (o *ebpfObjects) Close() error {
	return _EbpfClose(
		&o.ebpfPrograms,
		&o.ebpfMaps,
	)
}

// ebpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfMaps struct {
	ArgsMap                *ebpf.Map `ebpf:"args_map"`
	BinaryFilter           *ebpf.Map `ebpf:"binary_filter"`
	BinaryFilterVersion    *ebpf.Map `ebpf:"binary_filter_version"`
	BpfAttachMap           *ebpf.Map `ebpf:"bpf_attach_map"`
	BpfAttachTmpMap        *ebpf.Map `ebpf:"bpf_attach_tmp_map"`
	BpfProgLoadMap         *ebpf.Map `ebpf:"bpf_prog_load_map"`
	Bufs                   *ebpf.Map `ebpf:"bufs"`
	CgroupIdFilter         *ebpf.Map `ebpf:"cgroup_id_filter"`
	CgroupIdFilterVersion  *ebpf.Map `ebpf:"cgroup_id_filter_version"`
	CgrpctxmapEg           *ebpf.Map `ebpf:"cgrpctxmap_eg"`
	CgrpctxmapIn           *ebpf.Map `ebpf:"cgrpctxmap_in"`
	CommFilter             *ebpf.Map `ebpf:"comm_filter"`
	CommFilterVersion      *ebpf.Map `ebpf:"comm_filter_version"`
	ConfigMap              *ebpf.Map `ebpf:"config_map"`
	ContainersMap          *ebpf.Map `ebpf:"containers_map"`
	ElfFilesMap            *ebpf.Map `ebpf:"elf_files_map"`
	Entrymap               *ebpf.Map `ebpf:"entrymap"`
	EventDataMap           *ebpf.Map `ebpf:"event_data_map"`
	Events                 *ebpf.Map `ebpf:"events"`
	EventsMap              *ebpf.Map `ebpf:"events_map"`
	EventsMapVersion       *ebpf.Map `ebpf:"events_map_version"`
	ExpectedSysCallTable   *ebpf.Map `ebpf:"expected_sys_call_table"`
	FdArgPathMap           *ebpf.Map `ebpf:"fd_arg_path_map"`
	FileModificationMap    *ebpf.Map `ebpf:"file_modification_map"`
	FileReadPathFilter     *ebpf.Map `ebpf:"file_read_path_filter"`
	FileTypeFilter         *ebpf.Map `ebpf:"file_type_filter"`
	FileWritePathFilter    *ebpf.Map `ebpf:"file_write_path_filter"`
	FileWrites             *ebpf.Map `ebpf:"file_writes"`
	GenericSysEnterTails   *ebpf.Map `ebpf:"generic_sys_enter_tails"`
	GenericSysExitTails    *ebpf.Map `ebpf:"generic_sys_exit_tails"`
	Inodemap               *ebpf.Map `ebpf:"inodemap"`
	IoFilePathCacheMap     *ebpf.Map `ebpf:"io_file_path_cache_map"`
	KconfigMap             *ebpf.Map `ebpf:"kconfig_map"`
	KsymbolsMap            *ebpf.Map `ebpf:"ksymbols_map"`
	Logs                   *ebpf.Map `ebpf:"logs"`
	LogsCount              *ebpf.Map `ebpf:"logs_count"`
	MntNsFilter            *ebpf.Map `ebpf:"mnt_ns_filter"`
	MntNsFilterVersion     *ebpf.Map `ebpf:"mnt_ns_filter_version"`
	ModulesMap             *ebpf.Map `ebpf:"modules_map"`
	NetCapEvents           *ebpf.Map `ebpf:"net_cap_events"`
	NetHeapEvent           *ebpf.Map `ebpf:"net_heap_event"`
	NetconfigMap           *ebpf.Map `ebpf:"netconfig_map"`
	Netflowmap             *ebpf.Map `ebpf:"netflowmap"`
	NewModuleMap           *ebpf.Map `ebpf:"new_module_map"`
	PidFilter              *ebpf.Map `ebpf:"pid_filter"`
	PidFilterVersion       *ebpf.Map `ebpf:"pid_filter_version"`
	PidNsFilter            *ebpf.Map `ebpf:"pid_ns_filter"`
	PidNsFilterVersion     *ebpf.Map `ebpf:"pid_ns_filter_version"`
	PoliciesConfigMap      *ebpf.Map `ebpf:"policies_config_map"`
	PoliciesConfigVersion  *ebpf.Map `ebpf:"policies_config_version"`
	ProcInfoMap            *ebpf.Map `ebpf:"proc_info_map"`
	ProcessTreeMap         *ebpf.Map `ebpf:"process_tree_map"`
	ProcessTreeMapVersion  *ebpf.Map `ebpf:"process_tree_map_version"`
	ProgArray              *ebpf.Map `ebpf:"prog_array"`
	ProgArrayTp            *ebpf.Map `ebpf:"prog_array_tp"`
	RecentDeletedModuleMap *ebpf.Map `ebpf:"recent_deleted_module_map"`
	ScratchMap             *ebpf.Map `ebpf:"scratch_map"`
	SignalDataMap          *ebpf.Map `ebpf:"signal_data_map"`
	Signals                *ebpf.Map `ebpf:"signals"`
	Sockmap                *ebpf.Map `ebpf:"sockmap"`
	StackAddresses         *ebpf.Map `ebpf:"stack_addresses"`
	Sys32To64Map           *ebpf.Map `ebpf:"sys_32_to_64_map"`
	SysEnterInitTail       *ebpf.Map `ebpf:"sys_enter_init_tail"`
	SysEnterSubmitTail     *ebpf.Map `ebpf:"sys_enter_submit_tail"`
	SysEnterTails          *ebpf.Map `ebpf:"sys_enter_tails"`
	SysExitInitTail        *ebpf.Map `ebpf:"sys_exit_init_tail"`
	SysExitSubmitTail      *ebpf.Map `ebpf:"sys_exit_submit_tail"`
	SysExitTails           *ebpf.Map `ebpf:"sys_exit_tails"`
	TaskInfoMap            *ebpf.Map `ebpf:"task_info_map"`
	UidFilter              *ebpf.Map `ebpf:"uid_filter"`
	UidFilterVersion       *ebpf.Map `ebpf:"uid_filter_version"`
	UtsNsFilter            *ebpf.Map `ebpf:"uts_ns_filter"`
	UtsNsFilterVersion     *ebpf.Map `ebpf:"uts_ns_filter_version"`
	WalkModTreeQueue       *ebpf.Map `ebpf:"walk_mod_tree_queue"`
}

func (m *ebpfMaps) Close() error {
	return _EbpfClose(
		m.ArgsMap,
		m.BinaryFilter,
		m.BinaryFilterVersion,
		m.BpfAttachMap,
		m.BpfAttachTmpMap,
		m.BpfProgLoadMap,
		m.Bufs,
		m.CgroupIdFilter,
		m.CgroupIdFilterVersion,
		m.CgrpctxmapEg,
		m.CgrpctxmapIn,
		m.CommFilter,
		m.CommFilterVersion,
		m.ConfigMap,
		m.ContainersMap,
		m.ElfFilesMap,
		m.Entrymap,
		m.EventDataMap,
		m.Events,
		m.EventsMap,
		m.EventsMapVersion,
		m.ExpectedSysCallTable,
		m.FdArgPathMap,
		m.FileModificationMap,
		m.FileReadPathFilter,
		m.FileTypeFilter,
		m.FileWritePathFilter,
		m.FileWrites,
		m.GenericSysEnterTails,
		m.GenericSysExitTails,
		m.Inodemap,
		m.IoFilePathCacheMap,
		m.KconfigMap,
		m.KsymbolsMap,
		m.Logs,
		m.LogsCount,
		m.MntNsFilter,
		m.MntNsFilterVersion,
		m.ModulesMap,
		m.NetCapEvents,
		m.NetHeapEvent,
		m.NetconfigMap,
		m.Netflowmap,
		m.NewModuleMap,
		m.PidFilter,
		m.PidFilterVersion,
		m.PidNsFilter,
		m.PidNsFilterVersion,
		m.PoliciesConfigMap,
		m.PoliciesConfigVersion,
		m.ProcInfoMap,
		m.ProcessTreeMap,
		m.ProcessTreeMapVersion,
		m.ProgArray,
		m.ProgArrayTp,
		m.RecentDeletedModuleMap,
		m.ScratchMap,
		m.SignalDataMap,
		m.Signals,
		m.Sockmap,
		m.StackAddresses,
		m.Sys32To64Map,
		m.SysEnterInitTail,
		m.SysEnterSubmitTail,
		m.SysEnterTails,
		m.SysExitInitTail,
		m.SysExitSubmitTail,
		m.SysExitTails,
		m.TaskInfoMap,
		m.UidFilter,
		m.UidFilterVersion,
		m.UtsNsFilter,
		m.UtsNsFilterVersion,
		m.WalkModTreeQueue,
	)
}

// ebpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfPrograms struct {
	CgroupBpfRunFilterSkb                    *ebpf.Program `ebpf:"cgroup_bpf_run_filter_skb"`
	CgroupMkdirSignal                        *ebpf.Program `ebpf:"cgroup_mkdir_signal"`
	CgroupRmdirSignal                        *ebpf.Program `ebpf:"cgroup_rmdir_signal"`
	CgroupSkbEgress                          *ebpf.Program `ebpf:"cgroup_skb_egress"`
	CgroupSkbIngress                         *ebpf.Program `ebpf:"cgroup_skb_ingress"`
	EmptyKprobe                              *ebpf.Program `ebpf:"empty_kprobe"`
	KernelWriteMagicEnter                    *ebpf.Program `ebpf:"kernel_write_magic_enter"`
	KernelWriteMagicReturn                   *ebpf.Program `ebpf:"kernel_write_magic_return"`
	LkmSeekerKsetTail                        *ebpf.Program `ebpf:"lkm_seeker_kset_tail"`
	LkmSeekerModTreeTail                     *ebpf.Program `ebpf:"lkm_seeker_mod_tree_tail"`
	LkmSeekerNewModOnlyTail                  *ebpf.Program `ebpf:"lkm_seeker_new_mod_only_tail"`
	LkmSeekerProcTail                        *ebpf.Program `ebpf:"lkm_seeker_proc_tail"`
	ProcessExecuteFailedTail                 *ebpf.Program `ebpf:"process_execute_failed_tail"`
	SchedProcessExecEventSubmitTail          *ebpf.Program `ebpf:"sched_process_exec_event_submit_tail"`
	SchedProcessExecSignal                   *ebpf.Program `ebpf:"sched_process_exec_signal"`
	SchedProcessExitSignal                   *ebpf.Program `ebpf:"sched_process_exit_signal"`
	SchedProcessForkSignal                   *ebpf.Program `ebpf:"sched_process_fork_signal"`
	SendBin                                  *ebpf.Program `ebpf:"send_bin"`
	SendBinTp                                *ebpf.Program `ebpf:"send_bin_tp"`
	SysDupExitTail                           *ebpf.Program `ebpf:"sys_dup_exit_tail"`
	SysEnterInit                             *ebpf.Program `ebpf:"sys_enter_init"`
	SysEnterSubmit                           *ebpf.Program `ebpf:"sys_enter_submit"`
	SysExitInit                              *ebpf.Program `ebpf:"sys_exit_init"`
	SysExitSubmit                            *ebpf.Program `ebpf:"sys_exit_submit"`
	SyscallAccept4                           *ebpf.Program `ebpf:"syscall__accept4"`
	SyscallExecveEnter                       *ebpf.Program `ebpf:"syscall__execve_enter"`
	SyscallExecveExit                        *ebpf.Program `ebpf:"syscall__execve_exit"`
	SyscallExecveatEnter                     *ebpf.Program `ebpf:"syscall__execveat_enter"`
	SyscallExecveatExit                      *ebpf.Program `ebpf:"syscall__execveat_exit"`
	SyscallInitModule                        *ebpf.Program `ebpf:"syscall__init_module"`
	TraceRegisterChrdev                      *ebpf.Program `ebpf:"trace___register_chrdev"`
	TraceArchPrctl                           *ebpf.Program `ebpf:"trace_arch_prctl"`
	TraceBpfCheck                            *ebpf.Program `ebpf:"trace_bpf_check"`
	TraceCallUsermodehelper                  *ebpf.Program `ebpf:"trace_call_usermodehelper"`
	TraceCapCapable                          *ebpf.Program `ebpf:"trace_cap_capable"`
	TraceCheckHelperCall                     *ebpf.Program `ebpf:"trace_check_helper_call"`
	TraceCheckMapFuncCompatibility           *ebpf.Program `ebpf:"trace_check_map_func_compatibility"`
	TraceChmodCommon                         *ebpf.Program `ebpf:"trace_chmod_common"`
	TraceCommitCreds                         *ebpf.Program `ebpf:"trace_commit_creds"`
	TraceDebugfsCreateDir                    *ebpf.Program `ebpf:"trace_debugfs_create_dir"`
	TraceDebugfsCreateFile                   *ebpf.Program `ebpf:"trace_debugfs_create_file"`
	TraceDeviceAdd                           *ebpf.Program `ebpf:"trace_device_add"`
	TraceDoExit                              *ebpf.Program `ebpf:"trace_do_exit"`
	TraceDoInitModule                        *ebpf.Program `ebpf:"trace_do_init_module"`
	TraceDoMmap                              *ebpf.Program `ebpf:"trace_do_mmap"`
	TraceDoSigaction                         *ebpf.Program `ebpf:"trace_do_sigaction"`
	TraceDoSplice                            *ebpf.Program `ebpf:"trace_do_splice"`
	TraceDoTruncate                          *ebpf.Program `ebpf:"trace_do_truncate"`
	TraceDup                                 *ebpf.Program `ebpf:"trace_dup"`
	TraceDup2                                *ebpf.Program `ebpf:"trace_dup2"`
	TraceDup3                                *ebpf.Program `ebpf:"trace_dup3"`
	TraceExecBinprm                          *ebpf.Program `ebpf:"trace_exec_binprm"`
	TraceExecuteFinished                     *ebpf.Program `ebpf:"trace_execute_finished"`
	TraceFdInstall                           *ebpf.Program `ebpf:"trace_fd_install"`
	TraceFileModified                        *ebpf.Program `ebpf:"trace_file_modified"`
	TraceFileUpdateTime                      *ebpf.Program `ebpf:"trace_file_update_time"`
	TraceFilldir64                           *ebpf.Program `ebpf:"trace_filldir64"`
	TraceFilpClose                           *ebpf.Program `ebpf:"trace_filp_close"`
	TraceInotifyFindInode                    *ebpf.Program `ebpf:"trace_inotify_find_inode"`
	TraceKallsymsLookupName                  *ebpf.Program `ebpf:"trace_kallsyms_lookup_name"`
	TraceKernelWrite                         *ebpf.Program `ebpf:"trace_kernel_write"`
	TraceLoadElfPhdrs                        *ebpf.Program `ebpf:"trace_load_elf_phdrs"`
	TraceMmapAlert                           *ebpf.Program `ebpf:"trace_mmap_alert"`
	TraceProcCreate                          *ebpf.Program `ebpf:"trace_proc_create"`
	TraceProcessVmWritev                     *ebpf.Program `ebpf:"trace_process_vm_writev"`
	TracePtrace                              *ebpf.Program `ebpf:"trace_ptrace"`
	TraceRegisterKprobe                      *ebpf.Program `ebpf:"trace_register_kprobe"`
	TraceRetRegisterChrdev                   *ebpf.Program `ebpf:"trace_ret__register_chrdev"`
	TraceRetArchPrctl                        *ebpf.Program `ebpf:"trace_ret_arch_prctl"`
	TraceRetDoInitModule                     *ebpf.Program `ebpf:"trace_ret_do_init_module"`
	TraceRetDoMmap                           *ebpf.Program `ebpf:"trace_ret_do_mmap"`
	TraceRetDoSplice                         *ebpf.Program `ebpf:"trace_ret_do_splice"`
	TraceRetDup                              *ebpf.Program `ebpf:"trace_ret_dup"`
	TraceRetDup2                             *ebpf.Program `ebpf:"trace_ret_dup2"`
	TraceRetDup3                             *ebpf.Program `ebpf:"trace_ret_dup3"`
	TraceRetFileModified                     *ebpf.Program `ebpf:"trace_ret_file_modified"`
	TraceRetFileUpdateTime                   *ebpf.Program `ebpf:"trace_ret_file_update_time"`
	TraceRetInotifyFindInode                 *ebpf.Program `ebpf:"trace_ret_inotify_find_inode"`
	TraceRetKallsymsLookupName               *ebpf.Program `ebpf:"trace_ret_kallsyms_lookup_name"`
	TraceRetKernelWrite                      *ebpf.Program `ebpf:"trace_ret_kernel_write"`
	TraceRetKernelWriteTail                  *ebpf.Program `ebpf:"trace_ret_kernel_write_tail"`
	TraceRetProcessVmWritev                  *ebpf.Program `ebpf:"trace_ret_process_vm_writev"`
	TraceRetPtrace                           *ebpf.Program `ebpf:"trace_ret_ptrace"`
	TraceRetRegisterKprobe                   *ebpf.Program `ebpf:"trace_ret_register_kprobe"`
	TraceRetSockAllocFile                    *ebpf.Program `ebpf:"trace_ret_sock_alloc_file"`
	TraceRetVfsRead                          *ebpf.Program `ebpf:"trace_ret_vfs_read"`
	TraceRetVfsReadTail                      *ebpf.Program `ebpf:"trace_ret_vfs_read_tail"`
	TraceRetVfsReadv                         *ebpf.Program `ebpf:"trace_ret_vfs_readv"`
	TraceRetVfsReadvTail                     *ebpf.Program `ebpf:"trace_ret_vfs_readv_tail"`
	TraceRetVfsWrite                         *ebpf.Program `ebpf:"trace_ret_vfs_write"`
	TraceRetVfsWriteTail                     *ebpf.Program `ebpf:"trace_ret_vfs_write_tail"`
	TraceRetVfsWritev                        *ebpf.Program `ebpf:"trace_ret_vfs_writev"`
	TraceRetVfsWritevTail                    *ebpf.Program `ebpf:"trace_ret_vfs_writev_tail"`
	TraceSecurityBpf                         *ebpf.Program `ebpf:"trace_security_bpf"`
	TraceSecurityBpfMap                      *ebpf.Program `ebpf:"trace_security_bpf_map"`
	TraceSecurityBpfProg                     *ebpf.Program `ebpf:"trace_security_bpf_prog"`
	TraceSecurityBprmCheck                   *ebpf.Program `ebpf:"trace_security_bprm_check"`
	TraceSecurityBprmCredsForExec            *ebpf.Program `ebpf:"trace_security_bprm_creds_for_exec"`
	TraceSecurityFileIoctl                   *ebpf.Program `ebpf:"trace_security_file_ioctl"`
	TraceSecurityFileMprotect                *ebpf.Program `ebpf:"trace_security_file_mprotect"`
	TraceSecurityFileOpen                    *ebpf.Program `ebpf:"trace_security_file_open"`
	TraceSecurityFilePermission              *ebpf.Program `ebpf:"trace_security_file_permission"`
	TraceSecurityInodeMknod                  *ebpf.Program `ebpf:"trace_security_inode_mknod"`
	TraceSecurityInodeRename                 *ebpf.Program `ebpf:"trace_security_inode_rename"`
	TraceSecurityInodeSymlink                *ebpf.Program `ebpf:"trace_security_inode_symlink"`
	TraceSecurityInodeUnlink                 *ebpf.Program `ebpf:"trace_security_inode_unlink"`
	TraceSecurityKernelPostReadFile          *ebpf.Program `ebpf:"trace_security_kernel_post_read_file"`
	TraceSecurityKernelReadFile              *ebpf.Program `ebpf:"trace_security_kernel_read_file"`
	TraceSecurityMmapFile                    *ebpf.Program `ebpf:"trace_security_mmap_file"`
	TraceSecurityPathNotify                  *ebpf.Program `ebpf:"trace_security_path_notify"`
	TraceSecuritySbMount                     *ebpf.Program `ebpf:"trace_security_sb_mount"`
	TraceSecuritySettime64                   *ebpf.Program `ebpf:"trace_security_settime64"`
	TraceSecuritySkClone                     *ebpf.Program `ebpf:"trace_security_sk_clone"`
	TraceSecuritySocketAccept                *ebpf.Program `ebpf:"trace_security_socket_accept"`
	TraceSecuritySocketBind                  *ebpf.Program `ebpf:"trace_security_socket_bind"`
	TraceSecuritySocketConnect               *ebpf.Program `ebpf:"trace_security_socket_connect"`
	TraceSecuritySocketCreate                *ebpf.Program `ebpf:"trace_security_socket_create"`
	TraceSecuritySocketListen                *ebpf.Program `ebpf:"trace_security_socket_listen"`
	TraceSecuritySocketRecvmsg               *ebpf.Program `ebpf:"trace_security_socket_recvmsg"`
	TraceSecuritySocketSendmsg               *ebpf.Program `ebpf:"trace_security_socket_sendmsg"`
	TraceSecuritySocketSetsockopt            *ebpf.Program `ebpf:"trace_security_socket_setsockopt"`
	TraceSecurityTaskSetrlimit               *ebpf.Program `ebpf:"trace_security_task_setrlimit"`
	TraceSetFsPwd                            *ebpf.Program `ebpf:"trace_set_fs_pwd"`
	TraceSockAllocFile                       *ebpf.Program `ebpf:"trace_sock_alloc_file"`
	TraceSwitchTaskNamespaces                *ebpf.Program `ebpf:"trace_switch_task_namespaces"`
	TraceSysEnter                            *ebpf.Program `ebpf:"trace_sys_enter"`
	TraceSysExit                             *ebpf.Program `ebpf:"trace_sys_exit"`
	TraceTracepointProbeRegisterPrioMayExist *ebpf.Program `ebpf:"trace_tracepoint_probe_register_prio_may_exist"`
	TraceUtimesCommon                        *ebpf.Program `ebpf:"trace_utimes_common"`
	TraceVfsRead                             *ebpf.Program `ebpf:"trace_vfs_read"`
	TraceVfsReadv                            *ebpf.Program `ebpf:"trace_vfs_readv"`
	TraceVfsUtimes                           *ebpf.Program `ebpf:"trace_vfs_utimes"`
	TraceVfsWrite                            *ebpf.Program `ebpf:"trace_vfs_write"`
	TraceVfsWritev                           *ebpf.Program `ebpf:"trace_vfs_writev"`
	TracepointCgroupCgroupAttachTask         *ebpf.Program `ebpf:"tracepoint__cgroup__cgroup_attach_task"`
	TracepointCgroupCgroupMkdir              *ebpf.Program `ebpf:"tracepoint__cgroup__cgroup_mkdir"`
	TracepointCgroupCgroupRmdir              *ebpf.Program `ebpf:"tracepoint__cgroup__cgroup_rmdir"`
	TracepointExecTest                       *ebpf.Program `ebpf:"tracepoint__exec_test"`
	TracepointModuleModuleFree               *ebpf.Program `ebpf:"tracepoint__module__module_free"`
	TracepointModuleModuleLoad               *ebpf.Program `ebpf:"tracepoint__module__module_load"`
	TracepointRawSyscallsSysEnter            *ebpf.Program `ebpf:"tracepoint__raw_syscalls__sys_enter"`
	TracepointRawSyscallsSysExit             *ebpf.Program `ebpf:"tracepoint__raw_syscalls__sys_exit"`
	TracepointSchedSchedProcessExec          *ebpf.Program `ebpf:"tracepoint__sched__sched_process_exec"`
	TracepointSchedSchedProcessExit          *ebpf.Program `ebpf:"tracepoint__sched__sched_process_exit"`
	TracepointSchedSchedProcessFork          *ebpf.Program `ebpf:"tracepoint__sched__sched_process_fork"`
	TracepointSchedSchedProcessFree          *ebpf.Program `ebpf:"tracepoint__sched__sched_process_free"`
	TracepointSchedSchedSwitch               *ebpf.Program `ebpf:"tracepoint__sched__sched_switch"`
	TracepointTaskTaskRename                 *ebpf.Program `ebpf:"tracepoint__task__task_rename"`
	UprobeLkmSeeker                          *ebpf.Program `ebpf:"uprobe_lkm_seeker"`
	UprobeLkmSeekerSubmitter                 *ebpf.Program `ebpf:"uprobe_lkm_seeker_submitter"`
	UprobeMemDumpTrigger                     *ebpf.Program `ebpf:"uprobe_mem_dump_trigger"`
	UprobeSeqOpsTrigger                      *ebpf.Program `ebpf:"uprobe_seq_ops_trigger"`
	UprobeSyscallTableCheck                  *ebpf.Program `ebpf:"uprobe_syscall_table_check"`
	VfsWriteMagicEnter                       *ebpf.Program `ebpf:"vfs_write_magic_enter"`
	VfsWriteMagicReturn                      *ebpf.Program `ebpf:"vfs_write_magic_return"`
	VfsWritevMagicEnter                      *ebpf.Program `ebpf:"vfs_writev_magic_enter"`
	VfsWritevMagicReturn                     *ebpf.Program `ebpf:"vfs_writev_magic_return"`
}

func (p *ebpfPrograms) Close() error {
	return _EbpfClose(
		p.CgroupBpfRunFilterSkb,
		p.CgroupMkdirSignal,
		p.CgroupRmdirSignal,
		p.CgroupSkbEgress,
		p.CgroupSkbIngress,
		p.EmptyKprobe,
		p.KernelWriteMagicEnter,
		p.KernelWriteMagicReturn,
		p.LkmSeekerKsetTail,
		p.LkmSeekerModTreeTail,
		p.LkmSeekerNewModOnlyTail,
		p.LkmSeekerProcTail,
		p.ProcessExecuteFailedTail,
		p.SchedProcessExecEventSubmitTail,
		p.SchedProcessExecSignal,
		p.SchedProcessExitSignal,
		p.SchedProcessForkSignal,
		p.SendBin,
		p.SendBinTp,
		p.SysDupExitTail,
		p.SysEnterInit,
		p.SysEnterSubmit,
		p.SysExitInit,
		p.SysExitSubmit,
		p.SyscallAccept4,
		p.SyscallExecveEnter,
		p.SyscallExecveExit,
		p.SyscallExecveatEnter,
		p.SyscallExecveatExit,
		p.SyscallInitModule,
		p.TraceRegisterChrdev,
		p.TraceArchPrctl,
		p.TraceBpfCheck,
		p.TraceCallUsermodehelper,
		p.TraceCapCapable,
		p.TraceCheckHelperCall,
		p.TraceCheckMapFuncCompatibility,
		p.TraceChmodCommon,
		p.TraceCommitCreds,
		p.TraceDebugfsCreateDir,
		p.TraceDebugfsCreateFile,
		p.TraceDeviceAdd,
		p.TraceDoExit,
		p.TraceDoInitModule,
		p.TraceDoMmap,
		p.TraceDoSigaction,
		p.TraceDoSplice,
		p.TraceDoTruncate,
		p.TraceDup,
		p.TraceDup2,
		p.TraceDup3,
		p.TraceExecBinprm,
		p.TraceExecuteFinished,
		p.TraceFdInstall,
		p.TraceFileModified,
		p.TraceFileUpdateTime,
		p.TraceFilldir64,
		p.TraceFilpClose,
		p.TraceInotifyFindInode,
		p.TraceKallsymsLookupName,
		p.TraceKernelWrite,
		p.TraceLoadElfPhdrs,
		p.TraceMmapAlert,
		p.TraceProcCreate,
		p.TraceProcessVmWritev,
		p.TracePtrace,
		p.TraceRegisterKprobe,
		p.TraceRetRegisterChrdev,
		p.TraceRetArchPrctl,
		p.TraceRetDoInitModule,
		p.TraceRetDoMmap,
		p.TraceRetDoSplice,
		p.TraceRetDup,
		p.TraceRetDup2,
		p.TraceRetDup3,
		p.TraceRetFileModified,
		p.TraceRetFileUpdateTime,
		p.TraceRetInotifyFindInode,
		p.TraceRetKallsymsLookupName,
		p.TraceRetKernelWrite,
		p.TraceRetKernelWriteTail,
		p.TraceRetProcessVmWritev,
		p.TraceRetPtrace,
		p.TraceRetRegisterKprobe,
		p.TraceRetSockAllocFile,
		p.TraceRetVfsRead,
		p.TraceRetVfsReadTail,
		p.TraceRetVfsReadv,
		p.TraceRetVfsReadvTail,
		p.TraceRetVfsWrite,
		p.TraceRetVfsWriteTail,
		p.TraceRetVfsWritev,
		p.TraceRetVfsWritevTail,
		p.TraceSecurityBpf,
		p.TraceSecurityBpfMap,
		p.TraceSecurityBpfProg,
		p.TraceSecurityBprmCheck,
		p.TraceSecurityBprmCredsForExec,
		p.TraceSecurityFileIoctl,
		p.TraceSecurityFileMprotect,
		p.TraceSecurityFileOpen,
		p.TraceSecurityFilePermission,
		p.TraceSecurityInodeMknod,
		p.TraceSecurityInodeRename,
		p.TraceSecurityInodeSymlink,
		p.TraceSecurityInodeUnlink,
		p.TraceSecurityKernelPostReadFile,
		p.TraceSecurityKernelReadFile,
		p.TraceSecurityMmapFile,
		p.TraceSecurityPathNotify,
		p.TraceSecuritySbMount,
		p.TraceSecuritySettime64,
		p.TraceSecuritySkClone,
		p.TraceSecuritySocketAccept,
		p.TraceSecuritySocketBind,
		p.TraceSecuritySocketConnect,
		p.TraceSecuritySocketCreate,
		p.TraceSecuritySocketListen,
		p.TraceSecuritySocketRecvmsg,
		p.TraceSecuritySocketSendmsg,
		p.TraceSecuritySocketSetsockopt,
		p.TraceSecurityTaskSetrlimit,
		p.TraceSetFsPwd,
		p.TraceSockAllocFile,
		p.TraceSwitchTaskNamespaces,
		p.TraceSysEnter,
		p.TraceSysExit,
		p.TraceTracepointProbeRegisterPrioMayExist,
		p.TraceUtimesCommon,
		p.TraceVfsRead,
		p.TraceVfsReadv,
		p.TraceVfsUtimes,
		p.TraceVfsWrite,
		p.TraceVfsWritev,
		p.TracepointCgroupCgroupAttachTask,
		p.TracepointCgroupCgroupMkdir,
		p.TracepointCgroupCgroupRmdir,
		p.TracepointExecTest,
		p.TracepointModuleModuleFree,
		p.TracepointModuleModuleLoad,
		p.TracepointRawSyscallsSysEnter,
		p.TracepointRawSyscallsSysExit,
		p.TracepointSchedSchedProcessExec,
		p.TracepointSchedSchedProcessExit,
		p.TracepointSchedSchedProcessFork,
		p.TracepointSchedSchedProcessFree,
		p.TracepointSchedSchedSwitch,
		p.TracepointTaskTaskRename,
		p.UprobeLkmSeeker,
		p.UprobeLkmSeekerSubmitter,
		p.UprobeMemDumpTrigger,
		p.UprobeSeqOpsTrigger,
		p.UprobeSyscallTableCheck,
		p.VfsWriteMagicEnter,
		p.VfsWriteMagicReturn,
		p.VfsWritevMagicEnter,
		p.VfsWritevMagicReturn,
	)
}

func _EbpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//ebpf_bpfel.o
var _EbpfBytes []byte
